diff --git a/node_modules/@metamask/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt b/node_modules/@metamask/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt
index e06cbc9..45580c8 100644
--- a/node_modules/@metamask/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt
+++ b/node_modules/@metamask/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt
@@ -100,61 +100,6 @@ class RNCWebViewManagerImpl {
         }
         webView.setDownloadListener(DownloadListener { url, userAgent, contentDisposition, mimetype, contentLength ->
             webView.setIgnoreErrFailedForThisURL(url)
-            val module = webView.themedReactContext.getNativeModule(RNCWebViewModule::class.java) ?: return@DownloadListener
-            val request: DownloadManager.Request = try {
-                DownloadManager.Request(Uri.parse(url))
-            } catch (e: IllegalArgumentException) {
-                Log.w(TAG, "Unsupported URI, aborting download", e)
-                return@DownloadListener
-            }
-            var fileName = URLUtil.guessFileName(url, contentDisposition, mimetype)
-
-            // Sanitize filename by replacing invalid characters with "_"
-            fileName = fileName.replace(invalidCharRegex, "_")
-
-            val downloadMessage = "Downloading $fileName"
-
-            //Filename validation checking for files that use RTL characters and do not allow those types
-            if (Bidi(fileName, Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT).isMixed) {
-                Toast.makeText(webView.context, "Invalid filename or type", Toast.LENGTH_LONG).show()
-            } else {
-                val builder = AlertDialog.Builder(webView.context)
-                builder.setMessage("Do you want to download \n$fileName?")
-                builder.setCancelable(false)
-                builder.setPositiveButton("Download") { _, _ ->
-                    //Attempt to add cookie, if it exists
-                    var urlObj: URL? = null
-                    try {
-                        urlObj = URL(url)
-                        val baseUrl = urlObj.protocol + "://" + urlObj.host
-                        val cookie = CookieManager.getInstance().getCookie(baseUrl)
-                        request.addRequestHeader("Cookie", cookie)
-                    } catch (e: MalformedURLException) {
-                        Log.w(TAG, "Error getting cookie for DownloadManager", e)
-                    }
-
-                    //Finish setting up request
-                    request.addRequestHeader("User-Agent", userAgent)
-                    request.setTitle(fileName)
-                    request.setDescription(downloadMessage)
-                    request.allowScanningByMediaScanner()
-                    request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
-                    request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, fileName)
-                    module.setDownloadRequest(request)
-                    if (module.grantFileDownloaderPermissions(
-                                    getDownloadingMessageOrDefault(),
-                                    getLackPermissionToDownloadMessageOrDefault()
-                            )
-                    ) {
-                        module.downloadFile(
-                                getDownloadingMessageOrDefault()
-                        )
-                    }
-                }
-                builder.setNegativeButton("Cancel") { _: DialogInterface?, _: Int -> }
-                val alertDialog = builder.create()
-                alertDialog.show()
-            }
         })
         return RNCWebViewWrapper(context, webView)
     }
